// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/defender/client/client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/liquid-collective/terraform-provider-openzeppelin-defender/pkg/defender/client"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ArchiveProposal mocks base method.
func (m *MockClient) ArchiveProposal(ctx context.Context, contractID, proposalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveProposal", ctx, contractID, proposalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveProposal indicates an expected call of ArchiveProposal.
func (mr *MockClientMockRecorder) ArchiveProposal(ctx, contractID, proposalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveProposal", reflect.TypeOf((*MockClient)(nil).ArchiveProposal), ctx, contractID, proposalID)
}

// CreateProposal mocks base method.
func (m *MockClient) CreateProposal(ctx context.Context, msg *client.CreateProposalReqMsg) (*client.ProposalRespMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposal", ctx, msg)
	ret0, _ := ret[0].(*client.ProposalRespMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposal indicates an expected call of CreateProposal.
func (mr *MockClientMockRecorder) CreateProposal(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposal", reflect.TypeOf((*MockClient)(nil).CreateProposal), ctx, msg)
}

// GetProposalByList mocks base method.
func (m *MockClient) GetProposalByList(ctx context.Context, contractID, proposalID string) (*client.ProposalRespMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByList", ctx, contractID, proposalID)
	ret0, _ := ret[0].(*client.ProposalRespMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByList indicates an expected call of GetProposalByList.
func (mr *MockClientMockRecorder) GetProposalByList(ctx, contractID, proposalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByList", reflect.TypeOf((*MockClient)(nil).GetProposalByList), ctx, contractID, proposalID)
}

// ListProposals mocks base method.
func (m *MockClient) ListProposals(ctx context.Context, includeArchived bool) ([]*client.ProposalRespMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposals", ctx, includeArchived)
	ret0, _ := ret[0].([]*client.ProposalRespMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposals indicates an expected call of ListProposals.
func (mr *MockClientMockRecorder) ListProposals(ctx, includeArchived interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposals", reflect.TypeOf((*MockClient)(nil).ListProposals), ctx, includeArchived)
}
